public final enum class durbodax.customers.Enums.Ownership extends java.lang.Enum
{
    public static final enum durbodax.customers.Enums.Ownership NA;
    public static final enum durbodax.customers.Enums.Ownership OWNED;
    public static final enum durbodax.customers.Enums.Ownership RENTED;
    private static final java.util.Map lookup;
    private int code;
    private static final durbodax.customers.Enums.Ownership[] $VALUES;
    public static java.lang.Class class$durbodax$customers$Enums$Ownership;

    static void <clinit>()
    {
        durbodax.customers.Enums.Ownership temp$0, temp$1, temp$2, owner, temp$17, temp$19, temp$20, temp$21;
        java.util.HashMap temp$3;
        java.lang.Class temp$4, temp$5, temp$6;
        java.util.EnumSet temp$7, temp$8;
        java.util.Iterator temp$9;
        boolean temp$10;
        java.lang.Object temp$11, temp$16;
        java.io.PrintStream temp$12;
        java.util.Map temp$13;
        int temp$14;
        java.lang.Integer temp$15;
        durbodax.customers.Enums.Ownership[] temp$18;

        temp$0 = new durbodax.customers.Enums.Ownership;
        specialinvoke temp$0.<durbodax.customers.Enums.Ownership: void <init>(java.lang.String,int,int)>("NA", 0, 0);
        <durbodax.customers.Enums.Ownership: durbodax.customers.Enums.Ownership NA> = temp$0;
        temp$1 = new durbodax.customers.Enums.Ownership;
        specialinvoke temp$1.<durbodax.customers.Enums.Ownership: void <init>(java.lang.String,int,int)>("OWNED", 1, 1);
        <durbodax.customers.Enums.Ownership: durbodax.customers.Enums.Ownership OWNED> = temp$1;
        temp$2 = new durbodax.customers.Enums.Ownership;
        specialinvoke temp$2.<durbodax.customers.Enums.Ownership: void <init>(java.lang.String,int,int)>("RENTED", 2, 2);
        <durbodax.customers.Enums.Ownership: durbodax.customers.Enums.Ownership RENTED> = temp$2;
        temp$3 = new java.util.HashMap;
        specialinvoke temp$3.<java.util.HashMap: void <init>()>();
        <durbodax.customers.Enums.Ownership: java.util.Map lookup> = temp$3;
        temp$5 = <durbodax.customers.Enums.Ownership: java.lang.Class class$durbodax$customers$Enums$Ownership>;
        if temp$5 != null goto label0;

        temp$6 = staticinvoke <durbodax.customers.Enums.Ownership: java.lang.Class class$(java.lang.String)>("durbodax.customers.Enums.Ownership");
        <durbodax.customers.Enums.Ownership: java.lang.Class class$durbodax$customers$Enums$Ownership> = temp$6;
        temp$4 = temp$6;
        goto label1;

     label0:
        nop;
        temp$4 = <durbodax.customers.Enums.Ownership: java.lang.Class class$durbodax$customers$Enums$Ownership>;

     label1:
        nop;
        temp$7 = staticinvoke <java.util.EnumSet: java.util.EnumSet allOf(java.lang.Class)>(temp$4);
        temp$8 = (java.util.EnumSet) temp$7;
        temp$9 = interfaceinvoke temp$8.<java.lang.Iterable: java.util.Iterator iterator()>();

     label2:
        nop;
        temp$10 = interfaceinvoke temp$9.<java.util.Iterator: boolean hasNext()>();
        if temp$10 == 0 goto label3;

        temp$11 = interfaceinvoke temp$9.<java.util.Iterator: java.lang.Object next()>();
        owner = (durbodax.customers.Enums.Ownership) temp$11;
        temp$12 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke temp$12.<java.io.PrintStream: void println(java.lang.String)>("flow:352");
        temp$13 = <durbodax.customers.Enums.Ownership: java.util.Map lookup>;
        temp$14 = virtualinvoke owner.<durbodax.customers.Enums.Ownership: int getCode()>();
        temp$15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(temp$14);
        temp$16 = interfaceinvoke temp$13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(temp$15, owner);
        temp$17 = (durbodax.customers.Enums.Ownership) temp$16;
        nop;
        goto label2;

     label3:
        nop;
        temp$18 = newarray (durbodax.customers.Enums.Ownership)[3];
        temp$19 = <durbodax.customers.Enums.Ownership: durbodax.customers.Enums.Ownership NA>;
        temp$18[0] = temp$19;
        temp$20 = <durbodax.customers.Enums.Ownership: durbodax.customers.Enums.Ownership OWNED>;
        temp$18[1] = temp$20;
        temp$21 = <durbodax.customers.Enums.Ownership: durbodax.customers.Enums.Ownership RENTED>;
        temp$18[2] = temp$21;
        <durbodax.customers.Enums.Ownership: durbodax.customers.Enums.Ownership[] $VALUES> = temp$18;
        return;
    }

    private void <init>(java.lang.String, int, int)
    {
        durbodax.customers.Enums.Ownership this;
        java.lang.String @p0;
        int @p1, code;
        java.io.PrintStream temp$0;

        this := @this: durbodax.customers.Enums.Ownership;
        @p0 := @parameter0: java.lang.String;
        @p1 := @parameter1: int;
        code := @parameter2: int;
        specialinvoke this.<java.lang.Enum: void <init>(java.lang.String,int)>(@p0, @p1);
        temp$0 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke temp$0.<java.io.PrintStream: void println(java.lang.String)>("flow:353");
        this.<durbodax.customers.Enums.Ownership: int code> = code;
        return;
    }

    public final int getCode()
    {
        durbodax.customers.Enums.Ownership this;
        java.io.PrintStream temp$0;
        int temp$1;

        this := @this: durbodax.customers.Enums.Ownership;
        temp$0 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke temp$0.<java.io.PrintStream: void println(java.lang.String)>("flow:354");
        temp$1 = this.<durbodax.customers.Enums.Ownership: int code>;
        return temp$1;
    }

    public static final durbodax.customers.Enums.Ownership getOwnershipStatus(int)
    {
        int code;
        java.io.PrintStream temp$0;
        java.util.Map temp$1;
        java.lang.Integer temp$2;
        java.lang.Object temp$3;
        durbodax.customers.Enums.Ownership temp$4;

        code := @parameter0: int;
        temp$0 = <java.lang.System: java.io.PrintStream out>;
        virtualinvoke temp$0.<java.io.PrintStream: void println(java.lang.String)>("flow:355");
        temp$1 = <durbodax.customers.Enums.Ownership: java.util.Map lookup>;
        temp$2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(code);
        temp$3 = interfaceinvoke temp$1.<java.util.Map: java.lang.Object get(java.lang.Object)>(temp$2);
        temp$4 = (durbodax.customers.Enums.Ownership) temp$3;
        return temp$4;
    }

    public static final durbodax.customers.Enums.Ownership[] values()
    {
        durbodax.customers.Enums.Ownership[] temp$0, temp$2;
        java.lang.Object temp$1;

        temp$0 = <durbodax.customers.Enums.Ownership: durbodax.customers.Enums.Ownership[] $VALUES>;
        temp$1 = virtualinvoke temp$0.<java.lang.Object: java.lang.Object clone()>();
        temp$2 = (durbodax.customers.Enums.Ownership[]) temp$1;
        return temp$2;
    }

    public static final durbodax.customers.Enums.Ownership valueOf(java.lang.String)
    {
        java.lang.String s;
        java.lang.Class temp$0, temp$1, temp$2;
        java.lang.Enum temp$3;
        durbodax.customers.Enums.Ownership temp$4;

        s := @parameter0: java.lang.String;
        temp$1 = <durbodax.customers.Enums.Ownership: java.lang.Class class$durbodax$customers$Enums$Ownership>;
        if temp$1 != null goto label0;

        temp$2 = staticinvoke <durbodax.customers.Enums.Ownership: java.lang.Class class$(java.lang.String)>("durbodax.customers.Enums.Ownership");
        <durbodax.customers.Enums.Ownership: java.lang.Class class$durbodax$customers$Enums$Ownership> = temp$2;
        temp$0 = temp$2;
        goto label1;

     label0:
        nop;
        temp$0 = <durbodax.customers.Enums.Ownership: java.lang.Class class$durbodax$customers$Enums$Ownership>;

     label1:
        nop;
        temp$3 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(temp$0, s);
        temp$4 = (durbodax.customers.Enums.Ownership) temp$3;
        return temp$4;
    }

    public static final java.lang.Class class$(java.lang.String)
    {
        java.lang.String name, temp$2;
        java.lang.Class temp$0;
        java.lang.ClassNotFoundException e;
        java.lang.NoClassDefFoundError temp$1;

        name := @parameter0: java.lang.String;

     label0:
        nop;
        temp$0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(name);

     label1:
        nop;
        return temp$0;

     label2:
        nop;
        e := @caughtexception;
        temp$1 = new java.lang.NoClassDefFoundError;
        temp$2 = virtualinvoke e.<java.lang.ClassNotFoundException: java.lang.String getMessage()>();
        specialinvoke temp$1.<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>(temp$2);
        throw temp$1;

        catch java.lang.ClassNotFoundException from label0 to label1 with label2;
    }
}
